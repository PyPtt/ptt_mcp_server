# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: deploy

# run on merge to master or manual trigger
on:
  push:
    paths:
      - 'src/**/*'
      - 'setup.py'
      - 'requirements.txt'
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: |
          python -m build

      - name: Run TestPyPI auto versioning
        if: github.event_name == 'workflow_dispatch'
        run: |
          next_version=$(python src/auto_version.py)
          if [ -f src/_version.py ]; then
              cp src/_version.py src/_version.py.bak
          fi
          
          echo "__version__ = '$next_version'" > src/_version.py
          
          echo "Updated version to $next_version in src/_version.py"

      - name: Run TestPyPI release script
        if: github.event_name == 'workflow_dispatch'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
      - name: Restore version file
        if: github.event_name == 'workflow_dispatch'
        run: |
          
          if [ -f src/_version.py.bak ]; then
              mv src/_version.py.bak src/_version.py
              echo "Restored original version file from backup."
          else
              echo "No backup version file found."
          fi
          
      - name: Publish package
        if: github.event_name == 'push'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
